C**AGSPLN
C  Continuum Dynamics, Inc.
C  AGDISP Version 8.00 09/01/01
C
      SUBROUTINE AGSPLN(NPTS,YV,DV,NUMD,DEPD,DEPV,NUMP,PIDD,PIDV,DINT)
C
C  AGSPLN performs a natural cubic spline on deposition data
C  generated by controlled sampling and produces detailed deposition
C  and pond-integrated deposition data arrays
C
C  NPTS   - Number of points in controlled sampling deposition array
C  YV     - Downwind distance array (m)
C  DV     - Deposition array (fraction applied)
C  NUMD   - Number of points in deposition array
C  DEPD   - Downwind distance array (m)
C  DEPV   - Deposition array (fraction applied)
C  NUMP   - Number of points in pond-integrated deposition array
C  PIDD   - Downwind distance array (m)
C  PIDV   - Pond-integrated deposition array (fraction applied)
C  DINT   - Deposition integral from edge of field to infinity
C
      DIMENSION YV(2),DV(2),UV(25),Y2V(25)
      DIMENSION DEPD(2),DEPV(2),PIDD(2),PIDV(2)
C
      INCLUDE 'AGSAMPLE.INC'
C
      COMMON /EXTD/ AA,BB
C
C  Call SPLINE routine to set solution parameters
C
      CALL SPLINE(YV,DV,NPTS,UV,Y2V)
C
      NUMD=NDEPA
      DO N=1,NDEPA
        DEPD(N)=YDEPA(N)
        IF (DEPD(N).LE.YV(NPTS)) NMAX=N
      ENDDO
      DO N=1,NMAX
        CALL SPLINT(YV,DV,Y2V,NPTS,DEPD(N),DEPV(N))
      ENDDO
C
C  Extend solution to original downstream distance
C
      XLENG=YDEPA(NDEPA)-YV(NPTS)+63.6
      CALL AGEXTD(NMAX,DEPD,DEPV,XLENG,NTEM,DEPD,DEPV)
C
C  Compute pond-integrated deposition
C
      CALL AGAVE(NTEM,DEPD,DEPV,NUMP,PIDD,PIDV)
C
C  Develop integral from edge of field to infinity
C
      DINT=0.0
      DO N=2,NUMD
        DINT=DINT+0.5*(DEPD(N)-DEPD(N-1))*(DEPV(N)+DEPV(N-1))
      ENDDO
      IF (ABS(BB+1.0).GT.0.01)
     $  DINT=DINT+AA*(1615.0**(BB+1.0)-DEPD(NUMD)**(BB+1.0))/(BB+1.0)
      RETURN
      END
C**SPLINE
      SUBROUTINE SPLINE(X,Y,N,U,Y2)
C
C  Given arrays X and Y of length N containing a tabulated function
C  (Yi=f(Xi) with X1 < X2 < ... < Xn), with the assumption of a natural
C  cubic spline solution (zero second derivatives on the boundaries),
C  this routine returns an array Y2 of length N which contains the second
C  derivatives of the interpolating function at the tabulated points Xi.
C  The array U serves as a temporary variable.
C
C  SPLINE and SPLINT are from NUMERICAL RECIPES.
C
      DIMENSION X(2),Y(2),U(2),Y2(2)
C
      Y2(1)=0.0
      U(1)=0.0
C      Y2(1)=-0.5
C      U(1)=3.0*((Y(2)-Y(1))/(X(2)-X(1))-YP1)/(X(2)-X(1))
      DO I=2,N-1
        SIG=(X(I)-X(I-1))/(X(I+1)-X(I-1))
        P=SIG*Y2(I-1)+2.0
        Y2(I)=(SIG-1.0)/P
        U(I)=(6.0*((Y(I+1)-Y(I))/(X(I+1)-X(I))-(Y(I)-Y(I-1))/
     $       (X(I)-X(I-1)))/(X(I+1)-X(I-1))-SIG*U(I-1))/P
      ENDDO
      QN=0.0
      UN=0.0
C      QN=0.5
C      UN=3.0*(YPN-(Y(N)-Y(N-1))/(X(N)-X(N-1)))/(X(N)-X(N-1))
      Y2(N)=(UN-QN*U(N-1))/(QN*Y2(N-1)+1.0)
      DO K=N-1,1,-1
        Y2(K)=Y2(K)*Y2(K+1)+U(K)
      ENDDO
      RETURN
      END
C**SPLINT
      SUBROUTINE SPLINT(XA,YA,Y2A,N,X,Y)
C
C  Given the arrays XA and YA of length N, which tabulate a function
C  (with the XA's in order), and given the the array Y2A, which is the
C  output from SPLINE, and given a value of X, this routine returns a
C  cubic spline interpolated value Y.
C
      DIMENSION XA(2),YA(2),Y2A(2)
C
      KLO=1
      KHI=N
10    IF (KHI-KLO.GT.1) THEN
        K=(KHI+KLO)/2
        IF (XA(K).GT.X) THEN
          KHI=K
        ELSE
          KLO=K
        ENDIF
        GO TO 10
      ENDIF
      H=XA(KHI)-XA(KLO)
      A=(XA(KHI)-X)/H
      B=(X-XA(KLO))/H
      C=A*(A*A-1.0)*H*H/6.0
      D=B*(B*B-1.0)*H*H/6.0
C
C  Compute function value
C
      Y=A*YA(KLO)+B*YA(KHI)+C*Y2A(KLO)+D*Y2A(KHI)
C
C  Compute 1st derivative
C
C      DYDX=(YA(KHI)-YA(KLO))/H-(3.0*A*A-1.0)*H*Y2A(KLO)/6.0
C     $                        +(3.0*B*B-1.0)*H*Y2A(KHI)/6.0
C
C  Compute 2nd derivative
C
C      D2YDX2=A*Y2A(KLO)+B*Y2A(KHI)
      RETURN
      END